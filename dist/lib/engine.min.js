import{patterns as e,holder as a,monthMap as t,dayMap as i,timeDuration as n,timeTicksMap as s,timeDurationMap as r}from"./helpers.min.js";let regexify=(e,a,t,i)=>RegExp((a?"^":"")+String(e).substr(1,String(e).length-2)+(t?"$":""),i||"gi"),dateify=(...e)=>e.length?new Date(...e):new Date,randomKey=(e,a,t)=>Math.random().toString(e??20).substring(a??2,t??12),findMonthIndex=e=>{for(let a of t)if(a[1].includes(e.toLowerCase()))return a[0]+1;return 0},findDayIndex=e=>{for(let a of i)if(a[1].includes(e.toLowerCase()))return a[0]+1;return 0},filterOperations=async t=>{try{a.propertyOps=new Map,a.objectOps=new Map,a.rootOp=null,a.context="json";let i;String(t).trim().startsWith("[")&&(a.context="root",t=`{ rootPropertyIdentifier }${t}`);let n=String(t).replace(regexify(e.general.newLine),"").replace(regexify(e.operations.propertyOp),(t,n)=>{let s=t.split("").indexOf("["),r=t.substring(0,s),l=t.substring(s).replace(regexify(e.general.opList),"]*^*[").split("*^*"),d=`*instr-p:id_${randomKey()}`,m=l.map(a=>String(a).replace(regexify(e.general.operation,!0,!0),""));i=JSON.stringify(m);let u="and";i.match(/"cond:/)&&(u=i.match(/"cond:\\"or\\"/)?"or":"and",m=m.filter(e=>!e.match(/cond:/)));let o=regexify(e.general.omission,null,!0),c=r.trim().match(o);return a.propertyOps.set(d,{property:r.trim().replace(o,""),operation:m,condition:u,omit:Boolean(c)}),`${d}`}).replace(regexify(e.operations.objectOp,null,!0),(t,n)=>{let s=t.split("").indexOf("["),r=t.substring(s).replace(regexify(e.general.opList),"]*^*[").split("*^*").map(a=>String(a).replace(regexify(e.general.operation,!0,!0),""));return i=JSON.stringify(r),a.condition=i.match(/"cond:/)&&i.match(/"cond:\\"or\\"/)?"or":"and",a.mode=i.match(/"mode:/)&&i.match(/"mode:\\"or\\"/)?"or":"and",r=r.filter(e=>!e.match(/mode:/)&&!e.match(/cond:/)),a.rootOp=r,"}"}).replace(regexify(e.operations.objectOp),(t,n)=>{let s=t.split("").indexOf("["),r=t.substring(s).replace(regexify(e.general.opList),"]*^*[").split("*^*"),l=`*instr-o:id_${randomKey()}`,d=r.map(a=>String(a).replace(regexify(e.general.operation,!0,!0),""));i=JSON.stringify(d);let m="and",u="and";return i.match(/"cond:/)&&(m=i.match(/"cond:\\"or\\"/)?"or":"and",d=d.filter(e=>!e.match(/cond:/))),i.match(/"mode:/)&&(u=i.match(/"mode:\\"or\\"/)?"or":"and",d=d.filter(e=>!e.match(/mode:/))),a.objectOps.set(l,{operation:d,mode:u,condition:m}),`} ${l}`});return n}catch(s){return t}},filterSchema=async a=>{try{let t=await filterOperations(a),i=String(t).replace(regexify(e.general.newLine),"").replace(regexify(e.schema.commaAndSpace)," ").replace(regexify(e.schema.objectProperty),(e,a)=>`"${a}"`).replace(regexify(e.schema.spaceAndBrace),(e,a)=>({'" "':'":1, "','" {':'": {','"{':'": {','" }':'":1 }','"}':'":1 }'})[e]||"").replace(regexify(e.schema.braceAndSpace),'}, "');return{status:!0,schema:JSON.parse(i)}}catch(n){return{status:!1}}},walkThroughHandler=async({data:e,status:t,schema:i})=>{if(i)try{let n="string"==typeof e&&"root"!=a.context?JSON.parse(e):e,s="json"==a.context?(await schemaWalkThrough({schema:i,subject:n})).result:n;if(a.rootOp){let r=`*instr-p:id_${randomKey()}`;a.propertyOps.set(r,{property:a.rootKey,operation:a.rootOp,condition:a.condition});let l=await schemaWalkThrough({schema:{[r]:1},subject:{[a.rootKey]:s}});s=l.schemaPass?l.result[a.rootKey]:l.result[a.rootKey]instanceof Array?[]:Object.create(null)}return s}catch(d){return console.error(new Date,d,i),null}},schemaWalkThrough=async({schema:s,subject:l,mode:d})=>{let m={},u=!0,o=new Set([]),c=null;if(Array.isArray(l))for(let D of(m=[],l)){let f=await schemaWalkThrough({schema:s,subject:D,mode:d});f.schemaPass&&m.push(f.result)}else{let g=Object.keys(s),y=-1;for(let h of g){++y;let v=!0,p=new Set([]),k=null,b=regexify(e.general.omission,null,!0),I=Boolean(h.match(b)),x=h;if(h=h.replace(b,""),a.propertyOps.has(h)){let $=l[(k=a.propertyOps.get(h)).property];if(l.hasOwnProperty(k.property)){for(let _=0;_<k.operation.length;_++){let w=k.operation[_],S=w.split("").indexOf(":"),[T,L]=[w.substr(0,S),w.substr(++S)],P={};T=T||L,L&&(c=String(L).replace(regexify(e.general.quotes,!0,!0),"")||"");let M=["in","nin","ini","nini","sin","snin","dtin","dtnin","dtinrange","dtninrange","dtmin","dtmnin","dtminrange","dtmninrange","yin","ynin","yinrange","yninrange","min","mnin","minrange","mninrange","din","dnin","dinrange","dninrange","dwin","dwnin","dwinrange","dwninrange","hin","hnin","hinrange","hninrange","minin","minnin","mininrange","minninrange","tin","tnin","tinrange","tninrange","agoin","btw"].includes(T)?String(c).replace(regexify(e.general.operation,!0,!0),"").split(",").map(a=>{let t=String(a).trim().replace(regexify(e.general.quotes,!0,!0),"");return["sin","snin","yin","ynin","btw"].includes(T)?Number(t):t}):[];switch(T){case"as":k.alias=c;break;case"rew":c=c==T?"":c,$=String($).replace(regexify(e.general.raws),c||"");break;case"rw":c=c==T?"":c,$=String($).replace(regexify(e.general.ws),c||"");break;case"eq":v=String($)===c;break;case"eqi":v=String($).toLowerCase()===c.toLowerCase();break;case"ne":v=String($)!==c;break;case"nei":v=String($).toLowerCase()!==c.toLowerCase();break;case"gt":v=Number($)>Number(c);break;case"gte":v=Number($)>=Number(c);break;case"lt":v=Number($)<Number(c);break;case"lte":v=Number($)<=Number(c);break;case"nn":v=![null,void 0,""].includes($);break;case"in":v=Array.isArray($)?$.some(e=>M.some(a=>a==e||a===e)):M.some(e=>e==$||e===$);break;case"nin":v=Array.isArray($)?$.every(e=>!M.some(a=>a==e||a===e)):!M.some(e=>e==$||e===$);break;case"ini":case"nini":M=M.join(",").toLowerCase().split(","),P.status=Array.isArray($)?$.some(e=>Array.from(M).includes(String(e).toLowerCase())):Array.from(M).includes(String($).toLowerCase()),v="ini"==T?P.status:!P.status;break;case"regex":case"regexne":P.regexPattern=c.trim().substring(1).split("/"),P.status=RegExp(P.regexPattern[0],P.regexPattern[1]).test($),v="regex"==T?P.status:!P.status;break;case"regexin":case"regexnin":P.regexCluster=c.replace(regexify(e.general.operation,!0,!0),"").split(","),v=P.regexCluster.some(e=>(P.regexPattern=e.trim().substring(1).split("/"),P.status=Array.isArray($)?$.some(e=>RegExp(P.regexPattern[0],P.regexPattern[1]).test(e)):RegExp(P.regexPattern[0],P.regexPattern[1]).test($),"regexin"==T?P.status:!P.status));break;case"size":$=$ instanceof Array||"string"==typeof $?$.length:"object"==typeof $?Object.keys($).length:$;break;case"seq":v=$.length==Number(c);break;case"sne":v=$.length!=Number(c);break;case"sgt":v=$.length>Number(c);break;case"slt":v=$.length<Number(c);break;case"sgte":v=$.length>=Number(c);break;case"slte":v=$.length<=Number(c);break;case"sin":case"snin":let[F,q]=[Math.min(...Array.from(M)),Math.max(...Array.from(M))];P.status=$.length>=F&&$.length<=q,v="sin"==T?P.status:!P.status;break;case"dteq":case"dtne":[P.valueDate,P.filteredDate]=[dateify($).toLocaleDateString(),dateify(c).toLocaleDateString()],P.status="Invalid Date"!=P.valueDate&&P.valueDate==P.filteredDate,v="dteq"==T?P.status:!P.status;break;case"dtgt":case"dtlt":[P.valueDate,P.filteredDate]=[dateify(dateify($).toLocaleDateString()),dateify(dateify(c).toLocaleDateString())],v=![String(P.valueDate),String(P.filteredDate)].includes("Invalid Date")&&("dtgt"==T?P.valueDate>P.filteredDate:P.valueDate<P.filteredDate);break;case"dtgte":case"dtlte":[P.valueDate,P.filteredDate]=[dateify($),dateify(c)],v=![String(P.valueDate),String(P.filteredDate)].includes("Invalid Date")&&(("dtgte"==T?P.valueDate>P.filteredDate:P.valueDate<P.filteredDate)||P.valueDate.toLocaleDateString()==P.filteredDate.toLocaleDateString());break;case"dtin":case"dtnin":P.valueDate=dateify($).toLocaleDateString(),P.haystack=M,P.status=P.haystack.some(e=>{let a=dateify(e).toLocaleDateString();return"Invalid Date"!=a&&P.valueDate==a}),v=![String(P.valueDate)].includes("Invalid Date")&&("dtin"==T?P.status:!P.status);break;case"dtinrange":case"dtninrange":P.valueDate=dateify(dateify($).toLocaleDateString()),P.haystack={min:dateify(dateify(M[0]).toLocaleDateString()),max:2==M.length?dateify(dateify(M[1]).toLocaleDateString()):dateify().toLocaleDateString()},P.status=(P.valueDate>P.haystack.min||P.valueDate.toLocaleDateString()==P.haystack.min.toLocaleDateString())&&(P.valueDate<P.haystack.max||P.valueDate.toLocaleDateString()==P.haystack.max.toLocaleDateString()),v=![String(P.valueDate),String(P.haystack.min),String(P.haystack.max)].includes("Invalid Date")&&("dtinrange"==T?P.status:!P.status);break;case"dtmeq":case"dtmne":[P.valueDate,P.filteredDate]=[dateify($),dateify(c)],P.status="Invalid Date"!=String(P.valueDate)&&String(P.valueDate)==String(P.filteredDate),v="dtmeq"==T?P.status:!P.status;break;case"dtmgt":case"dtmlt":[P.valueDate,P.filteredDate]=[dateify($),dateify(c)],v=![String(P.valueDate),String(P.filteredDate)].includes("Invalid Date")&&("dtmgt"==T?P.valueDate>P.filteredDate:P.valueDate<P.filteredDate);break;case"dtmgte":case"dtmlte":[P.valueDate,P.filteredDate]=[dateify($),dateify(c)],v=![String(P.valueDate),String(P.filteredDate)].includes("Invalid Date")&&(("dtmgte"==T?P.valueDate>P.filteredDate:P.valueDate<P.filteredDate)||String(P.valueDate)==String(P.filteredDate));break;case"dtmin":case"dtmnin":P.valueDate=dateify($),P.haystack=M,P.status=P.haystack.some(e=>{let a=dateify(e);return"Invalid Date"!=a&&String(P.valueDate)==String(a)}),v=![String(P.valueDate)].includes("Invalid Date")&&("dtmin"==T?P.status:!P.status);break;case"dtminrange":case"dtmninrange":P.valueDate=dateify($),P.haystack={min:dateify(M[0]),max:dateify(M[1])},P.status=(P.valueDate>P.haystack.min||String(P.valueDate)==String(P.haystack.min))&&(P.valueDate<P.haystack.max||String(P.valueDate)==String(P.haystack.max)),v=![String(P.valueDate),String(P.haystack.min),String(P.haystack.max)].includes("Invalid Date")&&("dtminrange"==T?P.status:!P.status);break;case"yeq":case"yne":[P.valueDate,P.filteredDate]=[dateify($),c],P.status=![String(P.valueDate)].includes("Invalid Date")&&String(P.valueDate.getFullYear())==String(P.filteredDate),v="yeq"==T?P.status:!P.status;break;case"ygt":case"ylt":[P.valueDate,P.filteredDate]=[dateify($),c],v=![String(P.valueDate)].includes("Invalid Date")&&("ygt"==T?Number(P.valueDate.getFullYear())>Number(P.filteredDate):Number(P.valueDate.getFullYear())<Number(P.filteredDate));break;case"ygte":case"ylte":[P.valueDate,P.filteredDate]=[dateify($),c],v=![String(P.valueDate)].includes("Invalid Date")&&("ygte"==T?Number(P.valueDate.getFullYear())>=Number(P.filteredDate):Number(P.valueDate.getFullYear())<=Number(P.filteredDate));break;case"yin":case"ynin":P.valueDate=dateify($),P.haystack=M,P.status=P.haystack.some(e=>"Invalid Date"!=e&&String(P.valueDate.getFullYear())==String(e)),v=![String(P.valueDate)].includes("Invalid Date")&&("yin"==T?P.status:!P.status);break;case"yinrange":case"yninrange":P.valueDate=dateify($),P.haystack={min:M[0],max:M[1]},P.status=Number(P.valueDate.getFullYear())>=Number(P.haystack.min)&&Number(P.valueDate.getFullYear())<=Number(P.haystack.max),v=![String(P.valueDate)].includes("Invalid Date")&&("yinrange"==T?P.status:!P.status);break;case"meq":case"mne":[P.valueDate,P.filteredDate]=[dateify($),c],P.monthFilter=(P.valueDate.getMonth()||0)+1,P.status=![String(P.valueDate)].includes("Invalid Date")&&(isNaN(P.filteredDate)&&Array.from(t.get(P.valueDate.getMonth())).includes(String(P.filteredDate).toLowerCase())||!isNaN(P.filteredDate)&&String(P.monthFilter)==String(Number(P.filteredDate))),v="meq"==T?P.status:!P.status;break;case"mgt":case"mlt":P.valueDate=dateify($),P.monthFilter=(P.valueDate.getMonth()||0)+1,P.filteredDate=isNaN(c)?findMonthIndex(c):c,v=![String(P.valueDate)].includes("Invalid Date")&&Number(P.filteredDate)>=1&&12>=Number(P.filteredDate)&&("mgt"==T?Number(P.monthFilter)>Number(P.filteredDate):Number(P.monthFilter)<Number(P.filteredDate));break;case"mgte":case"mlte":P.valueDate=dateify($),P.monthFilter=(P.valueDate.getMonth()||0)+1,P.filteredDate=isNaN(c)?findMonthIndex(c):c,v=![String(P.valueDate)].includes("Invalid Date")&&Number(P.filteredDate)>=1&&12>=Number(P.filteredDate)&&("mgte"==T?Number(P.monthFilter)>=Number(P.filteredDate):Number(P.monthFilter)<=Number(P.filteredDate));break;case"min":case"mnin":P.valueDate=dateify($),P.monthFilter=(P.valueDate.getMonth()||0)+1,P.haystack=M,P.status=P.haystack.some(e=>{let a=isNaN(e)?findMonthIndex(e):e;return String(P.monthFilter)==String(Number(a))}),v=![String(P.valueDate)].includes("Invalid Date")&&("min"==T?P.status:!P.status);break;case"minrange":case"mninrange":P.valueDate=dateify($),P.monthFilter=(P.valueDate.getMonth()||0)+1,P.isNaN=M.some(e=>isNaN(e)),P.haystack=P.isNaN?M.map(e=>isNaN(e)?findMonthIndex(e):e):[M[0],M[1]],P.haystack={min:Math.min(P.haystack[0],P.haystack[1]),max:Math.max(P.haystack[0],P.haystack[1])},P.status=Number(P.haystack.min)>=1&&12>=Number(P.haystack.max)&&Number(P.monthFilter)>=Number(P.haystack.min)&&Number(P.monthFilter)<=Number(P.haystack.max),v=![String(P.valueDate)].includes("Invalid Date")&&("minrange"==T?P.status:!P.status);break;case"today":[P.valueDate,P.filteredDate]=[dateify($),dateify()],v=![String(P.valueDate)].includes("Invalid Date")&&P.valueDate.toLocaleDateString()==P.filteredDate.toLocaleDateString();break;case"deq":case"dne":[P.valueDate,P.filteredDate]=[dateify($),c],P.status=![String(P.valueDate)].includes("Invalid Date")&&!isNaN(P.filteredDate)&&String(P.valueDate.getDate())==String(Number(P.filteredDate)),v="deq"==T?P.status:!P.status;break;case"dgt":case"dlt":[P.valueDate,P.filteredDate]=[dateify($),c],v=![String(P.valueDate)].includes("Invalid Date")&&("dgt"==T?Number(P.valueDate.getDate())>Number(P.filteredDate):Number(P.valueDate.getDate())<Number(P.filteredDate));break;case"dgte":case"dlte":[P.valueDate,P.filteredDate]=[dateify($),c],v=![String(P.valueDate)].includes("Invalid Date")&&("dgte"==T?Number(P.valueDate.getDate())>=Number(P.filteredDate):Number(P.valueDate.getDate())<=Number(P.filteredDate));break;case"din":case"dnin":P.valueDate=dateify($),P.haystack=M,P.status=P.haystack.some(e=>String(Number(P.valueDate.getDate()))==String(Number(e))),v=![String(P.valueDate)].includes("Invalid Date")&&("din"==T?P.status:!P.status);break;case"dinrange":case"dninrange":P.valueDate=dateify($),P.haystack={min:Math.min(M[0],M[1]),max:Math.max(M[0],M[1])},P.status=Number(P.haystack.min)>=1&&31>=Number(P.haystack.max)&&Number(P.valueDate.getDate())>=Number(P.haystack.min)&&Number(P.valueDate.getDate())<=Number(P.haystack.max),v=![String(P.valueDate)].includes("Invalid Date")&&("dinrange"==T?P.status:!P.status);break;case"dweq":case"dwne":[P.valueDate,P.filteredDate]=[dateify($),c],P.dayFilter=(P.valueDate.getDay()||0)+1,P.status=![String(P.valueDate)].includes("Invalid Date")&&(isNaN(P.filteredDate)&&Array.from(i.get(P.valueDate.getDay())).includes(String(P.filteredDate).toLowerCase())||!isNaN(P.filteredDate)&&String(P.dayFilter)==String(Number(P.filteredDate))),v="dweq"==T?P.status:!P.status;break;case"dwgt":case"dwlt":P.valueDate=dateify($),P.dayFilter=(P.valueDate.getDay()||0)+1,P.filteredDate=isNaN(c)?findDayIndex(c):c,v=![String(P.valueDate)].includes("Invalid Date")&&Number(P.filteredDate)>=1&&7>=Number(P.filteredDate)&&("dwgt"==T?Number(P.dayFilter)>Number(P.filteredDate):Number(P.dayFilter)<Number(P.filteredDate));break;case"dwgte":case"dwlte":P.valueDate=dateify($),P.dayFilter=(P.valueDate.getDay()||0)+1,P.filteredDate=isNaN(c)?findDayIndex(c):c,v=![String(P.valueDate)].includes("Invalid Date")&&Number(P.filteredDate)>=1&&7>=Number(P.filteredDate)&&("dwgte"==T?Number(P.dayFilter)>=Number(P.filteredDate):Number(P.dayFilter)<=Number(P.filteredDate));break;case"dwin":case"dwnin":P.valueDate=dateify($),P.dayFilter=(P.valueDate.getDay()||0)+1,P.haystack=M,P.status=P.haystack.some(e=>{let a=isNaN(e)?findDayIndex(e):e;return String(P.dayFilter)==String(Number(a))}),v=![String(P.valueDate)].includes("Invalid Date")&&("dwin"==T?P.status:!P.status);break;case"dwinrange":case"dwninrange":P.valueDate=dateify($),P.dayFilter=(P.valueDate.getDay()||0)+1,P.isNaN=M.some(e=>isNaN(e)),P.haystack=P.isNaN?M.map(e=>isNaN(e)?findDayIndex(e):e):[M[0],M[1]],P.haystack={min:Math.min(P.haystack[0],P.haystack[1]),max:Math.max(P.haystack[0],P.haystack[1])},P.status=Number(P.haystack.min)>=1&&7>=Number(P.haystack.max)&&Number(P.dayFilter)>=Number(P.haystack.min)&&Number(P.dayFilter)<=Number(P.haystack.max),v=![String(P.valueDate)].includes("Invalid Date")&&("dwinrange"==T?P.status:!P.status);break;case"heq":case"hne":case"hgt":case"hlt":case"hgte":case"hlte":switch([P.valueDate,P.filteredDate]=[dateify($),c],P.isNaN=isNaN(P.filteredDate),P.timeInfo=P.isNaN?{hour:Number(P.filteredDate.replace(regexify(e.general.nonDigit),"")),meridiem:P.filteredDate.replace(regexify(e.general.nonAlphabet),"")}:{hour:Number(P.filteredDate)},P.isNaN&&(P.timeInfo.hour+="pm"==P.timeInfo.meridiem.toLowerCase()&&12!=P.timeInfo.hour?12:"am"==P.timeInfo.meridiem.toLowerCase()&&12!=P.timeInfo.hour||"am"==P.timeInfo.meridiem.toLowerCase()?0:-12),T){case"heq":case"hne":P.status=![String(P.valueDate)].includes("Invalid Date")&&String(P.valueDate.getHours())==String(P.timeInfo.hour),v="heq"==T?P.status:!P.status;break;case"hgt":case"hlt":v=![String(P.valueDate)].includes("Invalid Date")&&("hgt"==T?P.valueDate.getHours()>P.timeInfo.hour:P.valueDate.getHours()<P.timeInfo.hour);break;default:v=![String(P.valueDate)].includes("Invalid Date")&&("hgte"==T?P.valueDate.getHours()>=P.timeInfo.hour:P.valueDate.getHours()<=P.timeInfo.hour)}break;case"hin":case"hnin":P.valueDate=dateify($),P.status=![String(P.valueDate)].includes("Invalid Date")&&M.some(a=>(P.isNaN=isNaN(a),P.timeInfo=P.isNaN?{hour:Number(String(a).replace(regexify(e.general.nonDigit),"")),meridiem:String(a).replace(regexify(e.general.nonAlphabet),"")}:{hour:Number(a)},P.isNaN&&(P.timeInfo.hour+="pm"==P.timeInfo.meridiem.toLowerCase()&&12!=P.timeInfo.hour?12:"am"==P.timeInfo.meridiem.toLowerCase()&&12!=P.timeInfo.hour||"am"==P.timeInfo.meridiem.toLowerCase()?0:-12),String(P.valueDate.getHours())==String(P.timeInfo.hour))),v="hin"==T?P.status:!P.status;break;case"hinrange":case"hninrange":P.valueDate=dateify($),P.haystack=M.length>=2?[M[0],M[1]]:[M[0],M[0]],P.timeInfoRange=P.haystack.map(a=>(P.isNaN=isNaN(a),P.timeInfo=P.isNaN?{hour:Number(String(a).replace(regexify(e.general.nonDigit),"")),meridiem:String(a).replace(regexify(e.general.nonAlphabet),"")}:{hour:Number(a)},P.isNaN&&(P.timeInfo.hour+="pm"==P.timeInfo.meridiem.toLowerCase()&&12!=P.timeInfo.hour?12:"am"==P.timeInfo.meridiem.toLowerCase()&&12!=P.timeInfo.hour||"am"==P.timeInfo.meridiem.toLowerCase()?0:-12),P.timeInfo.hour)),P.haystack=[Math.min(...P.timeInfoRange),Math.max(...P.timeInfoRange)],P.status=![String(P.valueDate)].includes("Invalid Date")&&Number(P.valueDate.getHours())>=P.haystack[0]&&Number(P.valueDate.getHours())<=P.haystack[1],v="hinrange"==T?P.status:!P.status;break;case"mineq":case"minne":case"mingt":case"minlt":case"mingte":case"minlte":switch([P.valueDate,P.filteredDate]=[dateify($),c],P.minutes=P.valueDate.getMinutes(),T){case"mineq":case"minne":P.status=![String(P.valueDate)].includes("Invalid Date")&&String(P.minutes)==String(Number(P.filteredDate)),v="mineq"==T?P.status:!P.status;break;case"mingt":case"minlt":v=![String(P.valueDate)].includes("Invalid Date")&&("mingt"==T?P.minutes>Number(P.filteredDate):P.minutes<Number(P.filteredDate));break;default:v=![String(P.valueDate)].includes("Invalid Date")&&("mingte"==T?P.minutes>=Number(P.filteredDate):P.minutes<=Number(P.filteredDate))}break;case"minin":case"minnin":P.valueDate=dateify($),P.minutes=P.valueDate.getMinutes(),P.status=![String(P.valueDate)].includes("Invalid Date")&&M.some(e=>String(Number(e))==String(P.minutes)),v="minin"==T?P.status:!P.status;break;case"mininrange":case"minninrange":P.valueDate=dateify($),P.minutes=P.valueDate.getMinutes(),P.haystack=M.length>=2?[M[0],M[1]]:[M[0],M[M.length-1]],P.status=![String(P.valueDate)].includes("Invalid Date")&&P.minutes>=P.haystack[0]&&P.minutes<=P.haystack[1],v="mininrange"==T?P.status:!P.status;break;case"teq":case"tne":case"tgt":case"tlt":switch([P.valueDate,P.filteredDate]=[dateify($),c],P.possibleMeridiem=P.filteredDate.replace(regexify(e.general.nonAlphabet),"").toLowerCase(),P.hasMeridiem=["am","pm"].includes(P.possibleMeridiem),P.timeParts=P.filteredDate.replace(regexify(e.general.nonTimeXter),"").split(":").map(e=>Number(e)),P.timeInfo=P.hasMeridiem?{hour:Number(P.timeParts[0]),meridiem:P.possibleMeridiem}:{hour:Number(P.timeParts[0])},P.hasMeridiem&&(P.timeInfo.hour+="pm"==P.timeInfo.meridiem&&12!=P.timeInfo.hour?12:"am"==P.timeInfo.meridiem&&12!=P.timeInfo.hour||"am"==P.timeInfo.meridiem?0:-12),P.timeParts[0]=P.timeInfo.hour,P.valueTimeParts=[P.valueDate.getHours(),P.valueDate.getMinutes(),P.valueDate.getSeconds()],P.valueDateTime=dateify(...a.defaultDate,...P.valueTimeParts),P.filteredDateTime=dateify(...a.defaultDate,...P.timeParts),T){case"teq":case"tne":P.status=![String(P.valueDate)].includes("Invalid Date")&&String(P.valueDateTime)==String(P.filteredDateTime),v="teq"==T?P.status:!P.status;break;case"tgt":case"tlt":v=![String(P.valueDate)].includes("Invalid Date")&&("tgt"==T?P.valueDateTime>P.filteredDateTime:P.valueDateTime<P.filteredDateTime);break;case"tgte":case"tlte":v=![String(P.valueDate)].includes("Invalid Date")&&("tgte"==T?P.valueDateTime>=P.filteredDateTime:P.valueDateTime<=P.filteredDateTime)}break;case"tin":case"tnin":P.valueDate=dateify($),P.valueTimeParts=[P.valueDate.getHours(),P.valueDate.getMinutes(),P.valueDate.getSeconds()],P.valueDateTime=dateify(...a.defaultDate,...P.valueTimeParts),P.status=![String(P.valueDate)].includes("Invalid Date")&&M.some(t=>(P.possibleMeridiem=String(t).replace(regexify(e.general.nonAlphabet),"").toLowerCase(),P.hasMeridiem=["am","pm"].includes(P.possibleMeridiem),P.timeParts=String(t).replace(regexify(e.general.nonTimeXter),"").split(":").map(e=>Number(e)),P.timeInfo=P.hasMeridiem?{hour:Number(P.timeParts[0]),meridiem:P.possibleMeridiem}:{hour:Number(P.timeParts[0])},P.hasMeridiem&&(P.timeInfo.hour+="pm"==P.timeInfo.meridiem&&12!=P.timeInfo.hour?12:"am"==P.timeInfo.meridiem&&12!=P.timeInfo.hour||"am"==P.timeInfo.meridiem?0:-12),P.timeParts[0]=P.timeInfo.hour,P.filteredDateTime=dateify(...a.defaultDate,...P.timeParts),String(P.valueDateTime)==String(P.filteredDateTime))),v="tin"==T?P.status:!P.status;break;case"tinrange":case"tninrange":P.valueDate=dateify($),P.valueTimeParts=[P.valueDate.getHours(),P.valueDate.getMinutes(),P.valueDate.getSeconds()],P.valueDateTime=dateify(...a.defaultDate,...P.valueTimeParts),P.haystack=M.length>=2?[M[0],M[1]]:[M[0],M[0]],P.haystackTimeParts=P.haystack.map(t=>(P.possibleMeridiem=String(t).replace(regexify(e.general.nonAlphabet),"").toLowerCase(),P.hasMeridiem=["am","pm"].includes(P.possibleMeridiem),P.timeParts=String(t).replace(regexify(e.general.nonTimeXter),"").split(":").map(e=>Number(e)),P.timeInfo=P.hasMeridiem?{hour:Number(P.timeParts[0]),meridiem:P.possibleMeridiem}:{hour:Number(P.timeParts[0])},P.hasMeridiem&&(P.timeInfo.hour+="pm"==P.timeInfo.meridiem&&12!=P.timeInfo.hour?12:"am"==P.timeInfo.meridiem&&12!=P.timeInfo.hour||"am"==P.timeInfo.meridiem?0:-12),P.timeParts[0]=P.timeInfo.hour,dateify(...a.defaultDate,...P.timeParts))),P.status=![String(P.valueDate)].includes("Invalid Date")&&(P.valueDateTime>P.haystackTimeParts[0]||String(P.valueDateTime)==String(P.haystackTimeParts[0]))&&(P.valueDateTime<P.haystackTimeParts[1]||String(P.valueDateTime)==String(P.haystackTimeParts[1])),v="tinrange"==T?P.status:!P.status;break;case"ago":[P.valueDate,P.filteredDate]=[dateify($),c],P.timeSpan={sign:P.filteredDate.replace(regexify(e.general.nonSign),""),time:P.filteredDate.replace(regexify(e.general.nonDecimal),""),duration:P.filteredDate.replace(regexify(e.general.nonAlphabet),"").toLowerCase()},n.includes(P.timeSpan.duration)&&Number(P.timeSpan.time)>0?(P.timeSpan.ticks=r.get(P.timeSpan.duration),P.timeSpan.ms=Number(P.timeSpan.time)*P.timeSpan.ticks,P.timeSpan.lapse=dateify().getTime()-P.timeSpan.ms,P.range={min:P.timeSpan.lapse,max:P.timeSpan.lapse+P.timeSpan.ticks,maxWithSign:"+"==P.timeSpan.sign?dateify().getTime():null},P.status=P.timeSpan.sign?"+"==P.timeSpan.sign?P.valueDate.getTime()>=P.range.min&&P.valueDate.getTime()<=(P.range.maxWithSign||P.range.max):P.valueDate.getTime()<=P.range.min:P.valueDate.getTime()>=P.range.min&&P.valueDate.getTime()<=P.range.max,v=![String(P.valueDate)].includes("Invalid Date")&&P.status):v=!1;break;case"agoin":P.valueDate=dateify($),P.haystack=2==M.length?[M[0],M[1]]:[M[0],M[0]],P.haystackTimeMs=P.haystack.map(a=>(P.timeSpan={time:a.replace(regexify(e.general.nonDecimal),""),duration:a.replace(regexify(e.general.nonAlphabet),"").toLowerCase()},n.includes(P.timeSpan.duration)&&Number(P.timeSpan.time)>0)?(P.timeSpan.ticks=r.get(P.timeSpan.duration),P.timeSpan.ms=Number(P.timeSpan.time)*P.timeSpan.ticks,P.timeSpan.lapse=dateify().getTime()-P.timeSpan.ms,{min:P.timeSpan.lapse,max:P.timeSpan.lapse+P.timeSpan.ticks}):0),P.range={min:Math.min(P.haystackTimeMs[0].min,P.haystackTimeMs[1].min),max:Math.max(P.haystackTimeMs[0].max,P.haystackTimeMs[1].max)},P.status=P.valueDate.getTime()>=P.range.min&&P.valueDate.getTime()<=P.range.max,v=![String(P.valueDate)].includes("Invalid Date")&&P.status;break;case"first":$=Array.isArray($)?isNaN(c)?$[0]||[]:$.slice(0,Number(c)):$;break;case"last":$=Array.isArray($)?isNaN(c)?$[$.length-1]||[]:$.slice(-Number(c.replace(regexify(e.general.nonDigit),""))):$;break;case"btw":P.haystack=2==M.length?[Number(M[0])-1,M[1]]:[0,M[0]],$=Array.isArray($)?$.slice(P.haystack[0],P.haystack[1])||[]:$;break;case"dist":let C=new Set([]),N=new Set([]);$=Array.isArray($)?Array.from($,e=>"object"==typeof e?T==c?C.add(e):e[c]&&N.has(e[c])?null:C.add(e)&&N.add(e[c]):C.add(e)):$,$=Array.from(C.values())}p.add(v)}k.omit||(m[k.alias||k.property]=$)}}else if(l.hasOwnProperty(h)){if(1===s[h])I||(m[h]=l[h]);else{let O=!1,A="and",j=String(),K=null;if(a.objectOps.has(g[y+1])){let H=g[y+1],W=h;if(K=a.objectOps.get(H),j=`*instr-p:id_${randomKey()}`,A=K.mode,K.operation.length){let Y=K.operation.findIndex(e=>e.match(/^as:\".*\"$/));if(Y>=0){let z=String(K.operation[Y]).split(":")[1];K.currentKeyAlias=z.replace(regexify(e.general.quotes,!0,!0),""),K.operation.splice(Y,1),O=K.operation.length>0}else O=!0;a.propertyOps.set(j,{property:W,operation:K.operation,condition:K.condition})}}if((!I||I&&O)&&(m[K?.currentKeyAlias||h]=(await schemaWalkThrough({schema:s[h]??s[x],subject:l[h],mode:A})).result),O){let R=await schemaWalkThrough({schema:{[j]:1},subject:{[h]:m[K?.currentKeyAlias||h]}});I?delete m[K?.currentKeyAlias||h]:m[K?.currentKeyAlias||h]=R.schemaPass?R.result[h]:R.result[h]instanceof Array?[]:Object.create(null),p.add(R.schemaPass)}}}o.add(p.size>1?"or"==k.condition:Array.from(p.values())[0]??v)}u=a.propertyOps.size<1||(o.size>1?(d??a.mode)=="or":Array.from(o.values())[0])}return{schemaPass:u,result:m}};export{filterSchema,walkThroughHandler};